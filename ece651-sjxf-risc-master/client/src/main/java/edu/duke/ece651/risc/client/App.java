/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risc.client;


import edu.duke.ece651.risc.client.controller.LoginController;
import edu.duke.ece651.risc.client.controller.MapController;
import edu.duke.ece651.risc.shared.*;

import java.io.IOException;
import java.net.URL;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;


public class App extends Application {
    public final int HEIGHT = 1100;
    public final int WIDTH = 1800;
    public final int TERRITORY_SIZE = 125;
    public final int PADDING = 50;

    private volatile boolean[] receInfo;

    public App() {
        this.receInfo = new boolean[1];
    }

    public void initializeSocket(LoginMessage loginMessage, Player user, Map map, MapMessage mapMessage, ActionMessage actionMessage, RoundMessage roundMessage) {
//        ClientSocket clientSocket = new ClientSocket("67.159.89.51", 6066, user, map, loginMessage, mapMessage, actionMessage, roundMessage);
        ClientSocket clientSocket = new ClientSocket("67.159.95.2", 6066, user, map, loginMessage, mapMessage, actionMessage, roundMessage);
        clientSocket.start();
    }

    /**
     * Runs the window for the game
     * @param primaryStage the stage
     * @throws IOException
     * @throws InterruptedException
     */
    @Override
    public void start(Stage primaryStage) throws IOException, InterruptedException {
        Player user = new Player("", 0, 10, 100, 100);
        Map map = null;
        LoginMessage loginMessage = new LoginMessage();
        ActionMessage actionMessage = new ActionMessage();
        MapMessage mapMessage = new MapMessage();
        RoundMessage roundMessage = new RoundMessage();
        initializeSocket(loginMessage, user, map, mapMessage, actionMessage, roundMessage);

        Stage stage = new Stage();
        setStageSize(stage, WIDTH, HEIGHT, false);

        setLoginScene(stage, loginMessage);

        loginShowAndWait(stage, mapMessage);

        receInfo[0] = false;
        map = mapMessage.getGameMap();
        System.out.println("reach 2 !!!");

        setMainScene(stage, map, user, mapMessage, actionMessage, roundMessage);

        stage.show();
    }

    /**
     * sets the stage to specified size
     * @param stage is the stage
     * @param width is the width
     * @param height is the height
     * @param resizable is whether the window should be resizable
     */
    public void setStageSize(Stage stage, int width, int height, boolean resizable) {
        stage.setWidth(width);
        stage.setHeight(height);
        stage.setResizable(resizable);
    }

    /**
     * Show the login scene until login is pressed
     * @param stage is the stage
     * @param mapMessage is the message to send to the server
     */
    public void loginShowAndWait(Stage stage, MapMessage mapMessage) {
        boolean neverShown = true;
        while (!mapMessage.getAvailable()) {
            if (neverShown) {
                stage.showAndWait();
                neverShown = false;
            }
        }
    }

    /**
     * Set up the login scene
     * @param stage is the stage
     * @param loginMessage is the login message
     * @return the scene
     */
    public Scene setLoginScene(Stage stage, LoginMessage loginMessage) {
        System.out.println("reach 1 !!!");

        BorderPane bp = new BorderPane();
        Scene loginScene = new Scene(bp, WIDTH, HEIGHT, Color.BLACK);
        URL loginCssResource = this.getClass().getResource("/ui/login.css");
        loginScene.getStylesheets().add(loginCssResource.toString());

        LoginController loginController = new LoginController(loginScene, loginMessage, stage, receInfo);
        LoginPane loginPane = new LoginPane(new GridPane(), loginController);
        bp.setCenter(loginPane.getRoot());
        loginPane.getRoot().getStyleClass().add("gridPane");
        loginPane.drawLoginPane();
        stage.setScene(loginScene);
        return loginScene;
    }

    /**
     * Sets up the main gameplay scene
     * @param stage is the stage
     * @param map is the map
     * @param user is the player
     * @param mapMessage is the serialized map message
     * @param actionMessage is the serialized action message
     * @param roundMessage is the serialized round message
     * @return the scene
     */
    public Scene setMainScene(Stage stage, Map map, Player user, MapMessage mapMessage, ActionMessage actionMessage, RoundMessage roundMessage) {
        BorderPane root = new BorderPane();
        root.getStyleClass().add("borderPane");
        root.setPadding(new Insets(40));
        URL rootCssResource = this.getClass().getResource("/ui/root.css");
        root.getStylesheets().add(rootCssResource.toString());

        Scene mapScene = new Scene(root, WIDTH, HEIGHT, Color.BLACK);
        URL mapCssResource = this.getClass().getResource("/ui/map.css");
        mapScene.getStylesheets().add(mapCssResource.toString());

        MapController mc = new MapController(mapScene, map, user, mapMessage, actionMessage, roundMessage);
//        MapController mc = new MapController(mapScene, map, user);

        InfoPane infoPane = new InfoPane(new GridPane(), mc, user, map.getTerritoryByName("t3"), user.getUnitsToPlace());
        infoPane.drawInfoPane();
        root.setTop(infoPane.getRoot());

        UnitPane unitPane = new UnitPane(new GridPane(), mc);
        unitPane.drawUnitPane();
        root.setLeft(unitPane.getRoot());

        SpecialAbilitiesPane specialAbilitiesPane = new SpecialAbilitiesPane(new GridPane(), mc);
        specialAbilitiesPane.drawSpecialAbilitiesPane();
        root.setRight(specialAbilitiesPane.getRoot());

        Group group = new Group();
        MapPane mapPane = new MapPane(group, mc);
        switch (map.getNumTerritories()) {
            case 6: mapPane.draw6TerritoryMap(WIDTH - 600, HEIGHT - 200, TERRITORY_SIZE, PADDING, mc::onTerritoryPlacement, mc::onCommit); break;
            case 9: mapPane.draw9TerritoryMap(WIDTH - 600, HEIGHT - 200, TERRITORY_SIZE, PADDING, mc::onTerritoryPlacement, mc::onCommit); break;
            case 12: mapPane.draw12TerritoryMap(WIDTH - 600, HEIGHT - 200, TERRITORY_SIZE, PADDING, mc::onTerritoryPlacement, mc::onCommit); break;
            case 15: mapPane.draw15TerritoryMap(WIDTH - 600, HEIGHT - 200, TERRITORY_SIZE, PADDING, mc::onTerritoryPlacement, mc::onCommit); break;
        }
        root.setCenter(mapPane.getRoot());

        mc.initializeFogMap();
        stage.setScene(mapScene);

        return mapScene;
    }

}



